{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/search/match-highlighter.js"],"names":["mod","CodeMirror","defaults","style","minChars","delay","wordsOnly","annotateScrollbar","showToken","trim","State","options","name","this","hasOwnProperty","overlay","timeout","matchesonscroll","active","cursorActivity","cm","state","matchHighlighter","hasFocus","scheduleHighlight","onFocus","clearTimeout","setTimeout","highlightMatches","addOverlay","query","hasBoundary","makeOverlay","showMatchesOnScrollbar","searchFor","RegExp","test","charAt","replace","length","className","removeOverlay","clear","operation","somethingSelected","from","getCursor","to","line","isWord","selection","getRange","re","cur","getLine","start","ch","end","slice","str","match","pos","chr","boundariesAround","stream","string","token","next","skipTo","skipToEnd","defineOption","val","old","Init","off","on"],"mappings":"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","file":"js/chunk-2d0b2778.8547e454.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./matchesonscrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp((/\\w/.test(query.charAt(0)) ? \"\\\\b\" : \"\") +\n                                               query.replace(/[\\\\\\[.+*?(){|^$]/g, \"\\\\$&\") +\n                                               (/\\w/.test(query.charAt(query.length - 1)) ? \"\\\\b\" : \"\")) : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n"],"sourceRoot":""}
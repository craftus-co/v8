{"version":3,"sources":["webpack:///./node_modules/codemirror/addon/selection/mark-selection.js"],"names":["mod","CodeMirror","onCursorActivity","cm","state","markedSelection","operation","update","onChange","length","clear","defineOption","val","old","prev","Init","markedSelectionStyle","reset","on","off","CHUNK_SIZE","Pos","cmp","cmpPos","coverRange","from","to","addAt","array","cls","line","start","endLine","atEnd","end","mark","markText","className","push","splice","i","ranges","listSelections","somethingSelected","getCursor","coverStart","find","coverEnd","shift","pop"],"mappings":"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","file":"js/chunk-2d0e669a.b5db502b.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line <= CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n"],"sourceRoot":""}
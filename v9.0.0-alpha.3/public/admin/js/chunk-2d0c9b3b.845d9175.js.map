{"version":3,"sources":["webpack:///./node_modules/codemirror/mode/haxe/haxe.js"],"names":["mod","CodeMirror","defineMode","config","parserConfig","indentUnit","kw","type","style","content","A","B","C","operator","atom","attribute","keywords","isOperatorChar","chain","stream","state","f","tokenize","toUnescaped","end","next","escaped","ret","tp","cont","haxeTokenBase","ch","haxeTokenString","test","eat","eatWhile","match","reAllowed","haxeTokenComment","skipToEnd","current","word","known","propertyIsEnumerable","kwAllowed","quote","maybeEnd","atomicTypes","HaxeLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","parseHaxe","cc","cx","marked","lexical","hasOwnProperty","combinator","length","pop","statement","lex","imported","typename","charAt","len","importedtypes","i","registerimport","importname","t","pass","arguments","push","apply","inList","list","register","context","globalVars","defaultVars","pushcontext","vars","popcontext","pushlex","result","poplex","expect","wanted","metadef","vardef1","expression","block","maybeattribute","functiondef","forspec1","maybelabel","funarg","importdef","typedef","maybeoperator","maybeexpression","commasep","objprop","value","property","metaargs","what","proceed","typeuse","vardef2","forin","_type","typestring","typeprop","startState","basecolumn","defaulttypes","token","sol","indentation","eatSpace","indent","textAfter","firstChar","closing","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","define","inString","peek","skipTo"],"mappings":"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","file":"js/chunk-2d0c9b3b.845d9175.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haxe\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n\n  // Tokenizer\n\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\");\n  var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"}, attribute = {type:\"attribute\", style: \"attribute\"};\n  var type = kw(\"typedef\");\n  var keywords = {\n    \"if\": A, \"while\": A, \"else\": B, \"do\": B, \"try\": B,\n    \"return\": C, \"break\": C, \"continue\": C, \"new\": C, \"throw\": C,\n    \"var\": kw(\"var\"), \"inline\":attribute, \"static\": attribute, \"using\":kw(\"import\"),\n    \"public\": attribute, \"private\": attribute, \"cast\": kw(\"cast\"), \"import\": kw(\"import\"), \"macro\": kw(\"macro\"),\n    \"function\": kw(\"function\"), \"catch\": kw(\"catch\"), \"untyped\": kw(\"untyped\"), \"callback\": kw(\"cb\"),\n    \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n    \"in\": operator, \"never\": kw(\"property_access\"), \"trace\":kw(\"trace\"),\n    \"class\": type, \"abstract\":type, \"enum\":type, \"interface\":type, \"typedef\":type, \"extends\":type, \"implements\":type, \"dynamic\":type,\n    \"true\": atom, \"false\": atom, \"null\": atom\n  };\n\n  var isOperatorChar = /[+\\-*&%=<>!?|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function toUnescaped(stream, end) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == end && !escaped)\n        return true;\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n\n  function haxeTokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return chain(stream, state, haxeTokenString(ch));\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"0\" && stream.eat(/x/i)) {\n      stream.eatWhile(/[\\da-f]/i);\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n      stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n      return ret(\"number\", \"number\");\n    } else if (state.reAllowed && (ch == \"~\" && stream.eat(/\\//))) {\n      toUnescaped(stream, \"/\");\n      stream.eatWhile(/[gimsu]/);\n      return ret(\"regexp\", \"string-2\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, haxeTokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", null, stream.current());\n      }\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"conditional\", \"meta\");\n    } else if (ch == \"@\") {\n      stream.eat(/:/);\n      stream.eatWhile(/[\\w_]/);\n      return ret (\"metadata\", \"meta\");\n    } else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", null, stream.current());\n    } else {\n      var word;\n      if(/[A-Z]/.test(ch)) {\n        stream.eatWhile(/[\\w_<>]/);\n        word = stream.current();\n        return ret(\"type\", \"variable-3\", word);\n      } else {\n        stream.eatWhile(/[\\w_]/);\n        var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];\n        return (known && state.kwAllowed) ? ret(known.type, known.style, word) :\n                       ret(\"variable\", \"variable\", word);\n      }\n    }\n  }\n\n  function haxeTokenString(quote) {\n    return function(stream, state) {\n      if (toUnescaped(stream, quote))\n        state.tokenize = haxeTokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function haxeTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = haxeTokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true};\n\n  function HaxeLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n  }\n\n  function parseHaxe(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        if (type == \"variable\" && imported(state, content)) return \"variable-3\";\n        return style;\n      }\n    }\n  }\n\n  function imported(state, typename) {\n    if (/[a-z]/.test(typename.charAt(0)))\n      return false;\n    var len = state.importedtypes.length;\n    for (var i = 0; i<len; i++)\n      if(state.importedtypes[i]==typename) return true;\n  }\n\n  function registerimport(importname) {\n    var state = cx.state;\n    for (var t = state.importedtypes; t; t = t.next)\n      if(t.name == importname) return;\n    state.importedtypes = { name: importname, next: state.importedtypes };\n  }\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next)\n      if (v.name == name) return true;\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    if (state.context) {\n      cx.marked = \"def\";\n      if (inList(varname, state.localVars)) return;\n      state.localVars = {name: varname, next: state.localVars};\n    } else if (state.globalVars) {\n      if (inList(varname, state.globalVars)) return;\n      state.globalVars = {name: varname, next: state.globalVars};\n    }\n  }\n\n  // Combinators\n\n  var defaultVars = {name: \"this\", next: null};\n  function pushcontext() {\n    if (!cx.state.context) cx.state.localVars = defaultVars;\n    cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n  popcontext.lex = true;\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state;\n      state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function f(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\") return pass();\n      else return cont(f);\n    }\n    return f;\n  }\n\n  function statement(type) {\n    if (type == \"@\") return cont(metadef);\n    if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"),\n                                   poplex, statement, poplex);\n    if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n    if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"),\n                                      block, poplex, poplex);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                     statement, poplex, popcontext);\n    if (type == \"import\") return cont(importdef, expect(\";\"));\n    if (type == \"typedef\") return cont(typedef);\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function expression(type) {\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n    if (type == \"type\" ) return cont(maybeoperator);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"keyword c\") return cont(maybeexpression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n    if (type == \"operator\") return cont(expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperator(type, value) {\n    if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n    if (type == \"operator\" || type == \":\") return cont(expression);\n    if (type == \";\") return;\n    if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n    if (type == \".\") return cont(property, maybeoperator);\n    if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n  }\n\n  function maybeattribute(type) {\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"var\") return cont(vardef1);\n  }\n\n  function metadef(type) {\n    if(type == \":\") return cont(metadef);\n    if(type == \"variable\") return cont(metadef);\n    if(type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n  }\n  function metaargs(type) {\n    if(type == \"variable\") return cont();\n  }\n\n  function importdef (type, value) {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if(type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n  }\n\n  function typedef (type, value)\n  {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) { return cont(); }\n  }\n\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperator, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type) {\n    if (type == \"variable\") cx.marked = \"property\";\n    if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n  }\n  function commasep(what, end) {\n    function proceed(type) {\n      if (type == \",\") return cont(what, proceed);\n      if (type == end) return cont();\n      return cont(expect(end));\n    }\n    return function(type) {\n      if (type == end) return cont();\n      else return pass(what, proceed);\n    };\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function vardef1(type, value) {\n    if (type == \"variable\"){register(value); return cont(typeuse, vardef2);}\n    return cont();\n  }\n  function vardef2(type, value) {\n    if (value == \"=\") return cont(expression, vardef2);\n    if (type == \",\") return cont(vardef1);\n  }\n  function forspec1(type, value) {\n    if (type == \"variable\") {\n      register(value);\n      return cont(forin, expression)\n    } else {\n      return pass()\n    }\n  }\n  function forin(_type, value) {\n    if (value == \"in\") return cont();\n  }\n  function functiondef(type, value) {\n    //function names starting with upper-case letters are recognised as types, so cludging them together here.\n    if (type == \"variable\" || type == \"type\") {register(value); return cont(functiondef);}\n    if (value == \"new\") return cont(functiondef);\n    if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n  }\n  function typeuse(type) {\n    if(type == \":\") return cont(typestring);\n  }\n  function typestring(type) {\n    if(type == \"type\") return cont();\n    if(type == \"variable\") return cont();\n    if(type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n  }\n  function typeprop(type) {\n    if(type == \"variable\") return cont(typeuse);\n  }\n  function funarg(type, value) {\n    if (type == \"variable\") {register(value); return cont(typeuse);}\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n      var state = {\n        tokenize: haxeTokenBase,\n        reAllowed: true,\n        kwAllowed: true,\n        cc: [],\n        lexical: new HaxeLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        importedtypes: defaulttypes,\n        context: parserConfig.localVars && {vars: parserConfig.localVars},\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n      state.kwAllowed = type != '.';\n      return parseHaxe(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != haxeTokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;\n      if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + 4;\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"stat\" || type == \"form\") return lexical.indented + indentUnit;\n      else if (lexical.info == \"switch\" && !closing)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-haxe\", \"haxe\");\n\nCodeMirror.defineMode(\"hxml\", function () {\n\n  return {\n    startState: function () {\n      return {\n        define: false,\n        inString: false\n      };\n    },\n    token: function (stream, state) {\n      var ch = stream.peek();\n      var sol = stream.sol();\n\n      ///* comments */\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (sol && ch == \"-\") {\n        var style = \"variable-2\";\n\n        stream.eat(/-/);\n\n        if (stream.peek() == \"-\") {\n          stream.eat(/-/);\n          style = \"keyword a\";\n        }\n\n        if (stream.peek() == \"D\") {\n          stream.eat(/[D]/);\n          style = \"keyword c\";\n          state.define = true;\n        }\n\n        stream.eatWhile(/[A-Z]/i);\n        return style;\n      }\n\n      var ch = stream.peek();\n\n      if (state.inString == false && ch == \"'\") {\n        state.inString = true;\n        stream.next();\n      }\n\n      if (state.inString == true) {\n        if (stream.skipTo(\"'\")) {\n\n        } else {\n          stream.skipToEnd();\n        }\n\n        if (stream.peek() == \"'\") {\n          stream.next();\n          state.inString = false;\n        }\n\n        return \"string\";\n      }\n\n      stream.next();\n      return null;\n    },\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-hxml\", \"hxml\");\n\n});\n"],"sourceRoot":""}